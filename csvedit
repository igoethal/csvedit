#!/usr/bin/python3

import curses
import pandas as pd
import time
import os
import sys

from curses import wrapper
from curses import ascii
from math import nan

class PandasViewer:

    df = {} #Empty dataset that we will be using
    TblLayout = {} #Data structure to hold the dimensions of the table

    COLUMN_LENGTH_DEFAULT = 12
    COLUMN_LENGTH_MIN = 4
    COLUMN_LENGTH_MAX = 40

    selectrow = 0 #We browse the data starting at the first line
    selectcol = 0 #We browse the data starting at the first columns

    height = 0 #Height of the screen
    width = 0 #Width of the screen

    #--First row of the table--
    CHRHEADERTOPLEFT = '\u250c'
    CHRHEADERTOPMIDDLE = '\u252c'
    CHRHEADERTOPLINE = '\u2500'
    CHRHEADERTOPRIGHT = '\u2510'

    #--Header line with column names--
    CHRHEADERDATALEFT = '\u2502'
    CHRHEADERDATAMIDDLE = '\u2502'
    CHRHEADERDATARIGHT = '\u2502'

    #--Line right below the column names--
    CHRHEADERMIDDLELEFT = '\u251C'
    CHRHEADERMIDDLEMIDDLE = '\u253C'
    CHRHEADERMIDDLELINE = '\u2500'
    CHRHEADERMIDDLERIGHT = '\u2524'

    #--Last line of the table--
    CHRHEADERBOTTOMLEFT = '\u2514'
    CHRHEADERBOTTOMMIDDLE = '\u2534'
    CHRHEADERBOTTOMLINE = '\u2500'
    CHRHEADERBOTTOMRIGHT = '\u2518'

    #Function to read the layout of the table (number and size of rows and columns)
    def analyseTblLayout(self):
        self.TblLayout = {}
        self.TblLayout['numcols'] = self.df.shape[1]
        self.TblLayout['numrows'] = self.df.shape[0]
        self.TblLayout['columnnames'] = self.df.columns
        self.TblLayout['columnwidths'] = [self.COLUMN_LENGTH_DEFAULT]*self.TblLayout['numcols']
        counter = 0
        for column in self.df:
            self.TblLayout['columnwidths'][counter] = max(min(max(self.df[column].map(str).map(len).max(),len(column)),self.COLUMN_LENGTH_MAX),self.COLUMN_LENGTH_MIN)
            counter = counter + 1

    def calcStartRow(self):
        if (self.selectrow<self.startrow+5):
            self.startrow = max(0,self.selectrow-5)
        if (self.selectrow>self.startrow+self.height-5-5-1):
            self.startrow = min(self.selectrow-(self.height-5-5-1),self.TblLayout['numrows']-(self.height-5))

    def calcStartCol(self):
        if (self.selectcol<self.startcol): #Scroll left if needed
            self.startcol = self.selectcol
        elif (self.selectcol>self.startcol):
            endwidth = 0
            for i in range(self.startcol,self.selectcol+1):
                endwidth = endwidth + 2 + self.TblLayout['columnwidths'][i] + 1
            if (endwidth>self.width):
                self.startcol = self.startcol + 1
                self.calcStartCol()

    def displayheader(self):
        rows = self.TblLayout['numrows']
        if ( (self.height < 15) | (self.width < 40) ):
            if (self.height>0):
                self.stdscr.addstr(0,0,'Enlarge terminal to a minimum of 15x40'[:(self.width-1)])
        else:
            if (self.startcol == 0):
                headertop = self.CHRHEADERTOPLEFT
                headermiddle = self.CHRHEADERMIDDLELEFT
                headerbottom = self.CHRHEADERBOTTOMLEFT
                headerdata = self.CHRHEADERDATALEFT
            else:
                headertop = self.CHRHEADERTOPMIDDLE
                headermiddle = self.CHRHEADERMIDDLEMIDDLE
                headerbottom = self.CHRHEADERBOTTOMMIDDLE
                headerdata = self.CHRHEADERDATAMIDDLE
            for i in range(self.startcol,self.TblLayout['numcols']):
                if (len(headertop)<self.width):
                    headertop = headertop + self.CHRHEADERTOPLINE*(self.TblLayout['columnwidths'][i]+2)
                    headermiddle = headermiddle + self.CHRHEADERMIDDLELINE*(self.TblLayout['columnwidths'][i]+2)
                    headerbottom = headerbottom + self.CHRHEADERBOTTOMLINE*(self.TblLayout['columnwidths'][i]+2)
                    headerdata = headerdata + ' '+self.TblLayout['columnnames'][i][:self.TblLayout['columnwidths'][i]].ljust(self.TblLayout['columnwidths'][i])+' '
                    if (i<self.TblLayout['numcols']-1):
                        headertop = headertop + self.CHRHEADERTOPMIDDLE
                        headermiddle = headermiddle + self.CHRHEADERMIDDLEMIDDLE
                        headerbottom = headerbottom + self.CHRHEADERBOTTOMMIDDLE
                        headerdata = headerdata + self.CHRHEADERDATAMIDDLE
                    else:
                        headertop = headertop + self.CHRHEADERTOPRIGHT
                        headermiddle = headermiddle + self.CHRHEADERMIDDLERIGHT
                        headerbottom = headerbottom + self.CHRHEADERBOTTOMRIGHT
                        headerdata = headerdata + self.CHRHEADERDATARIGHT
                else:
                    break; #Break out of the for loop

            self.stdscr.addstr(0, 0, headertop[:self.width].ljust(self.width))
            self.stdscr.addstr(1, 0, headerdata[:self.width].ljust(self.width))
            self.stdscr.addstr(2, 0, headermiddle[:self.width].ljust(self.width))
            lastrow = min(2+rows+1,self.height-2)
            self.stdscr.addstr(lastrow, 0, headerbottom[:self.width].ljust(self.width))

    def displaydata(self):
        maxrows = self.startrow + self.height - 5
        if ( (self.height < 15) | (self.width < 40) ):
            return(0)
        tic = time.perf_counter()
        stoprow = min(maxrows-1,self.TblLayout['numrows']-1)
        displayrow = 3
        for j in range(self.startrow, stoprow+1):
            displaycol = 0
            if (self.width>displaycol):
                if (self.startcol == 0):
                    self.stdscr.addstr(displayrow, displaycol, self.CHRHEADERDATALEFT)
                else:
                    self.stdscr.addstr(displayrow, displaycol, self.CHRHEADERDATAMIDDLE)
                displaycol = displaycol + 1 #Also foresee an extra space at the left of the first data field
            if (self.width>displaycol):
                self.stdscr.addstr(displayrow, displaycol, ' ')
                displaycol = displaycol + 1 #Also foresee an extra space at the left of the first data field
            for i in range(self.startcol,self.TblLayout['numcols']):
                if (self.width>displaycol):
                    cellwidth = self.TblLayout['columnwidths'][i]
                    displaywidth = min(cellwidth,self.width-displaycol-1)
                    datastr = str(self.df.iloc[j,i])[:displaywidth].ljust(displaywidth)
                    if (j==self.selectrow):
                        highlight = curses.A_BOLD | curses.A_REVERSE * (i==self.selectcol)
                    else:
                        highlight = 0
                    self.stdscr.addstr(displayrow, displaycol, datastr, highlight)
                    displaycol = displaycol + displaywidth #Also foresee an extra space at the right of the data field
                if (self.width>displaycol):
                    self.stdscr.addstr(displayrow, displaycol, ' ')
                    displaycol = displaycol + 1 #Also foresee an extra space at the left of the first data field
                if (self.width>displaycol):
                    if (i<self.TblLayout['numcols']-1):
                        self.stdscr.addstr(displayrow, displaycol, self.CHRHEADERDATAMIDDLE)
                    else: #end of the line
                        self.stdscr.addstr(displayrow, displaycol, self.CHRHEADERDATARIGHT.ljust(self.width-displaycol-1))
                    displaycol = displaycol + 1 #Also foresee an extra space at the left of the separator
                if (self.width>displaycol):
                    self.stdscr.addstr(displayrow, displaycol, ' ')
                    displaycol = displaycol + 1 #Also foresee an extra space at the left of the first data field
            displayrow = displayrow + 1
        toc=time.perf_counter()
        statusline = 'Cell {}:{} ({})'.format(self.selectrow+1,self.selectcol+1,self.TblLayout['numrows'])
        statusline = statusline + ' | Ctrl-(W/X): Insert (Above/Below) | Ctrl-D: Delete record | F4: Save | Ctrl-E: Exit (no save)'
        #statusline = statusline + f"  Updated the screen in {toc - tic:0.8f} seconds  "
        #self.stdscr.addstr(self.height-1, 0, '> Row {} (0-{})'.format(self.selectrow,TblLayout['numrows']-1).ljust(30))
        self.stdscr.addstr(self.height-1,0,statusline[:(self.width-1)].ljust(self.width-1))

    def editdata(self,mykey):
        #editstr = str(self.df.loc[self.selectrow][self.selectcol])
        curses.curs_set(1)
        returncode = ''
        editstr = "" + mykey
        charpos = 0 + len(mykey)
        docontinue = True
        displaycol = 2
        for i in range(self.startcol,self.selectcol):
            displaycol = displaycol + self.TblLayout['columnwidths'][i]+3
        cellwidth = self.TblLayout['columnwidths'][self.selectcol]
        self.stdscr.addstr(3+self.selectrow-self.startrow,displaycol,editstr.ljust(cellwidth),(curses.A_REVERSE | curses.A_BOLD))
        self.stdscr.move(3+self.selectrow-self.startrow,displaycol+charpos)
        while (docontinue):
            mykey = self.stdscr.get_wch()
            if (isinstance(mykey,int)):
                if ( (mykey == curses.KEY_BTAB) | (mykey == curses.KEY_UP) | (mykey == curses.KEY_DOWN) | (mykey == 410) ):
                    docontinue = False
                    returncode = mykey #Enter
                elif ( (mykey == curses.KEY_BACKSPACE) | (mykey == 127) ):
                    if (charpos > 0):
                        charpos = charpos - 1
                        editstr = editstr[0:charpos]
            elif ( (mykey == '\n') | (mykey == '\t') ):
                    docontinue = False
                    returncode = mykey
            elif ( mykey == chr(27) ):
                    editstr = str(self.df.iloc[self.selectrow,self.selectcol]) #Put original text back
                    docontinue = False
                    returncode = mykey
            else:
                if ( (mykey == chr(127)) | (mykey == '\b') ):
                    if (charpos > 0):
                        charpos = charpos - 1
                        editstr = editstr[0:charpos]
                if (curses.ascii.iscntrl(mykey) == False): #Do not accept control characters
                    editstr = editstr + mykey[0]
                    charpos = charpos + 1
            if (charpos <= cellwidth):
                showstr = editstr[:cellwidth].ljust(cellwidth)
                showpos = charpos
            else:
                showstr = editstr[charpos-cellwidth:charpos]
                showpos = cellwidth
            self.stdscr.addstr(3+self.selectrow-self.startrow,displaycol,showstr,(curses.A_REVERSE | curses.A_BOLD))
            self.stdscr.move(3+self.selectrow-self.startrow,displaycol+showpos)
        self.df.iloc[self.selectrow,self.selectcol] = editstr
        curses.curs_set(0)
        return(returncode)

    def handleNavigationKey(self,mykey):
        returnkey = 0
        if (isinstance(mykey,int)):
            if (mykey == curses.KEY_NPAGE):
                self.selectrow = max(0,min(self.selectrow + (self.height-5-2),self.TblLayout['numrows']-1))
            elif (mykey == curses.KEY_PPAGE):
                self.selectrow = max(0,self.selectrow - (self.height-5-2))
            elif (mykey == curses.KEY_DOWN):
                self.selectrow = max(0,min(self.selectrow + 1,self.TblLayout['numrows']-1))
            elif (mykey == curses.KEY_UP):
                self.selectrow = max(0,self.selectrow - 1)
            elif (mykey == curses.KEY_BTAB):
                returnkey = curses.KEY_BTAB
            elif (mykey == curses.KEY_LEFT):
                self.selectcol = max(0,self.selectcol-1)
            elif (mykey == curses.KEY_RIGHT):
                self.selectcol = min(self.selectcol+1,self.TblLayout['numcols']-1)
            elif (mykey == curses.KEY_F2):
                if (self.TblLayout['numrows']>0):
                    returnkey = editdata('')
            elif (mykey == curses.KEY_F4):
                self.df.to_csv(sys.argv[1],index=False)
                self.stdscr.addstr(self.height-1,0,"File saved as \"{}\", press a key to continue".format(sys.argv[1]).ljust(self.width-1))
                self.stdscr.getch()
            elif (mykey == 410): #resize
                returnkey = mykey
            else:
                self.stdscr.addstr(self.height-1, 30, 'You pressed #{}#          '.format(mykey))
        elif (mykey == '\t'):
            returnkey = '\t'
        elif (mykey == '\n'):
            returnkey = '\n';
        elif (len(mykey)==1):
            if (ord(mykey)>31): #We will not match stuff like an escape character (27)
                if (self.TblLayout['numrows']>0):
                    returnkey = self.editdata(mykey)
            elif (ord(mykey)==23): #Ctrl-W
                self.df = pd.concat([self.df.head(self.selectrow), pd.DataFrame([[nan] * self.df.shape[1]], columns=self.df.columns), self.df.tail(self.TblLayout['numrows']-self.selectrow)], ignore_index=True)
                self.df.astype(str)
                self.TblLayout['numrows'] = self.df.shape[0]
                returnkey = 410 #Force resize
            elif (ord(mykey)==5): #Ctrl-E
                curses.curs_set(1)
                exit(0)
            elif (ord(mykey)==24): #Ctrl-X
                self.df = pd.concat([self.df.head(self.selectrow+1), pd.DataFrame([[nan] * self.df.shape[1]], columns=self.df.columns), self.df.tail(self.TblLayout['numrows']-self.selectrow-1)], ignore_index=True)
                self.df.astype(str)
                self.TblLayout['numrows'] = self.df.shape[0]
                self.selectrow = max(0,min(self.selectrow + 1,self.TblLayout['numrows']-1))
                returnkey = 410 #Force resize
            elif (ord(mykey)==4): #Ctrl-D
                if (self.TblLayout['numrows']>0):
                    self.df = self.df.drop(self.df.index[[self.selectrow]])
                    self.TblLayout['numrows'] = self.df.shape[0]
                    self.selectrow = max(0,self.selectrow - 1)
                    returnkey = 410 #Force resize
                self.selectrow = max(0,min(self.selectrow + 1,self.TblLayout['numrows']-1))
            #else:
            #    self.stdscr.addstr(self.height-1, 30, 'You pressed #{}#          '.format(ord(mykey)))
        #else:
        #    self.stdscr.addstr(self.height-1, 30, 'You pressed #{}#          '.format(mykey))
        #---------------------------------------------------------

        if (isinstance(returnkey,int)):
            if ( (returnkey == curses.KEY_DOWN) ):
                self.selectrow = min(self.selectrow + 1,self.TblLayout['numrows']-1)
            elif ( (returnkey == curses.KEY_UP) ):
                self.selectrow = max(0,self.selectrow - 1)
            elif (returnkey == curses.KEY_BTAB):
                if ( (self.selectcol == 0) & (self.selectrow > 0) ):
                    self.selectcol = self.TblLayout['numcols']-1
                    self.selectrow = self.selectrow - 1
                else:
                    self.selectcol = max(0,self.selectcol-1)
            elif (returnkey == 410): #resize
                self.height,self.width = self.stdscr.getmaxyx()
                self.stdscr.clear()
        elif ( (returnkey == '\t') | (returnkey == '\n') ):
            if ( (self.selectcol == self.TblLayout['numcols']-1) & (self.selectrow < self.TblLayout['numrows']-1) ):
                self.selectcol = 0
                self.selectrow = self.selectrow + 1
            else:
                self.selectcol = min(self.selectcol+1,self.TblLayout['numcols']-1)

    def navigate(self):
        mykey = self.stdscr.get_wch()
        self.handleNavigationKey(mykey)
        self.calcStartRow()
        self.calcStartCol()

    def init(self):
        self.analyseTblLayout()

        self.selectrow = 0 #Currently selected row number
        self.selectcol = 0 #Currently selected column number

        self.startrow = 0 #id of the first row shown on the screen
        self.startcol = 0 #id of the first column shown on the screen


        self.height,self.width = self.stdscr.getmaxyx() #Height and Witdh of the screen

        self.stdscr.clear()
        curses.curs_set(0)

    def show(self,stdscr,mydf):
        self.df = mydf
        self.stdscr = stdscr
        self.init() #Initialize a set of variables to default and analyze the Pandas datastructure

        while(1):
            self.displayheader()
            self.displaydata()
            self.navigate() #Wait for a keystroke and take action

#--- Reading the CSV file and starting the Pandas Curses viewer ---

def main(stdscr):
    if len(sys.argv) > 1:
        df = pd.read_csv(sys.argv[1],dtype=str)
    else:
        print("Syntax: csvedit <filename>")
        sys.exit(1)

    myViewer = PandasViewer()
    myViewer.show(stdscr,df)

#--- Main programming code ---

os.environ.setdefault('ESCDELAY', '25')
wrapper(main)
